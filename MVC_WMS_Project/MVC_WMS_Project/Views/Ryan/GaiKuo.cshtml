
@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>GaiKuo</title>
    <link href="~/css/gaikuo.css" rel="stylesheet" />
    <script src="~/js/g2.min.js"></script>
    <script src="~/js/axios.js"></script>
    <script src="~/js/Vue.js"></script>
</head>
<body>
    <div id="divZ">
        <!--div1-->
        <div id="div1">
            <div id="div2"></div>
            <h3 id="h3_1">数据概览</h3>
        </div>
        <!--数据总览-->
        <div id="div3">
            <p class="dp"><span>库存总量</span></p>
            <p class="dp"><span>本年销售总额</span></p>
            <p class="dp"><span>本周销售总额</span></p>
            <p class="dp"><span>本年采购额</span></p>
            <p class="dp1"><span id="KuCunTotal" v-for="f in info">{{f.numTotal}}</span></p>
            <p class="dp1"><span id="YearTotal"  v-for="f in info">{{f.yearTotal}}</span></p>
            <p class="dp1"><span id="ZhouTotal"  v-for="f in info">{{f.zhouTotal}}</span></p>
            <p class="dp1"><span id="CaiGouTotal"v-for="f in info">{{f.caiGouTotal}}</span></p>
            <p class="dp2"><span>库存成本</span></p>
            <p class="dp2"><span>本年销售毛利</span></p>
            <p class="dp2"><span>本周销售毛利</span></p>
            <p class="dp2"><span>本月采购额</span></p>
            <p class="dp1"><span id="ChengBenTotal" v-for="f in info">{{f.chengBenTotal}}</span></p>
            <p class="dp1"><span>2,660.31</span></p>
            <p class="dp1"><span>660.31</span></p>
            <p class="dp1"><span>1,400,990,823.71</span></p>
        </div>
        <div class="div_biao">
            <!--本季度业务员销售排名柱形统计图-->
            <div class="div_yewu">
                <span id="span1">本季度-业务员销售排名</span>
                <div id="c1"></div>
            </div>
            <!--本季度仓库销售比较分析-->
            <div class="div_cang">
                <span id="span1">本季度-仓库销售比较分析</span>
                <div id="c2"></div>
            </div>
            <!--本季度存货销售比较分析-->
            <div class="div_cun">
                <span id="span1">本季度-存货销售比较分析</span>
                <div id="c3"></div>
            </div>
            <!--本季度客户销售比较分析-->
            <div class="div_xiao">
                <span id="span1">本季度-客户销售比较分析</span>
                <div id="c4"></div>
            </div>
            <!--年度销售增长分析-->
            <div class="zengzhang">
                <span id="span1">2019年-销售增长分析</span>
                <div id="c5"></div>
            </div>
        </div>
        <!--版权-->
        <div class="banquan">
            <span>
                Copyright © AxurePro, All Rights Reserved.
            </span>
            <br />
            <span>
                阿里Giao团队创作，奥里给！
            </span>


        </div>
    </div>
</body>
</html>
<!--本季度业务员销售排名柱形统计图-->
<script>
    const data = [
        { genre: '李铭', sold: 700 },
        { genre: '王潇', sold: 690 },
        { genre: '李张莉', sold: 950 },
        { genre: '小伊伊', sold: 1450 },
        { genre: '李咪咪', sold: 1840 },
        { genre: '赵晓红', sold: 2150 },
        { genre: '小明', sold: 2520 },
        { genre: '孙思', sold: 2650 },
        { genre: '李总', sold: 2330 },
        { genre: '晓明', sold: 1830 },
        { genre: '辛丑', sold: 1390 },
        { genre: '万喜', sold: 960 },
    ];

    // Step 1: 创建 Chart 对象
    const chart = new G2.Chart({
        container: 'c1', // 指定图表容器 ID
        width: 720, // 指定图表宽度
        height: 500, // 指定图表高度
    });

    // Step 2: 载入数据源
    chart.data(data);
    chart.scale('sold', {
        alias: '销售金额',
    });

    // Step 3：创建图形语法，绘制柱状图
    chart.interval().position('genre*sold');

    // Step 4: 渲染图表
    chart.render();
</script>
<!--本季度仓库销售比较分析柱形统计图-->
<script>
    const data1 = [
        { type: '1号仓库', value: 390 },
        { type: '2号仓库', value: 420 },
        { type: '3号仓库', value: 570 },
        { type: '4号仓库', value: 850 },
        { type: '5号仓库', value: 1190 },
        { type: '6号仓库', value: 1520 },
        { type: '7号仓库', value: 1700 },
        { type: '8号仓库', value: 1660 },
    ];
    const chart1 = new G2.Chart({
        container: 'c2',
        width: 720,
        height: 500,
    });
    chart1.data(data1);
    chart1.scale('value', {
        alias: '销售金额',
    });
    chart1.interval().position('type*value');
    chart1.render();
</script>
<!--本季度存货销售比较分析-->
<script>
    const data2 = [
        { item: '电脑', count: 9, percent: 0.09 },
        { item: '智能设备', count: 5, percent: 0.05 },
        { item: '电子产品', count: 3, percent: 0.03 },
        { item: '穿戴设备', count: 2, percent: 0.02 },
        { item: '服务器', count: 5, percent: 0.05 },
        { item: '智能家电', count: 1, percent: 0.01 },
        { item: '手机', count: 50, percent: 0.5 },
        { item: '电视', count: 25, percent: 0.25 },

    ];
    const chart2 = new G2.Chart({
        container: 'c3',
        autoFit: true,
        height: 500,
    });
    chart2.data(data2);
    chart2.scale('percent', {
        formatter: (val) => {
            val = val * 100 + '%';
            return val;
        },
    });
    chart2.coordinate('theta', {
        radius: 0.75,
        innerRadius: 0.6,
    });
    chart2.tooltip({
        showTitle: false,
        showMarkers: false,
        itemTpl: '<li class="g2-tooltip-list-item"><span style="background-color:{color};" class="g2-tooltip-marker"></span>{name}: {value}</li>',
    });


    chart2
        .interval()
        .adjust('stack')
        .position('percent')
        .color('item')
        .label('percent', (percent) => {
            return {
                content: (data) => {
                    return `${data.item}: ${percent * 100}%`;
                },
            };
        })
        .tooltip('item*percent', (item, percent) => {
            percent = percent * 100 + '%';
            return {
                name: item,
                value: percent,
            };
        });

    chart2.interaction('element-single-selected');

    chart2.render();
</script>
<!--本季度客户销售比较分析-->
<script>
    const data3 = [
        { type: '华为科技', value: 2323 },
        { type: '小米科技', value: 4345 },
        { type: 'OPPO', value: 3334 },
        { type: 'vivo', value: 1112 },
        { type: 'Apple', value: 1190 },
        { type: '一家科技', value: 1520 },
        { type: 'Lenovo', value: 4354 },
        { type: '华为荣耀', value: 234 },
    ];
    const chart3 = new G2.Chart({
        container: 'c4',
        width: 720,
        height: 500,
    });
    chart3.data(data3);
    chart3.scale('value', {
        alias: '销售金额',
    });
    chart3.interval().position('type*value');
    chart3.render();
</script>
<!--年度销售增长分析-->
<script>
    const data4 = [
        { month: '2019-05-01', city: '销售金额', temperature: 7089.33 },
        { month: '2019-05-01', city: '毛利润金额', temperature: 18080 },
        { month: '2019-05-02', city: '销售金额', temperature: 5525.24 },
        { month: '2019-05-02', city: '毛利润金额', temperature: 100000 },
        { month: '2019-05-03', city: '销售金额', temperature: 3710.98 },
        { month: '2019-05-03', city: '毛利润金额', temperature: 2400 },
        { month: '2019-05-04', city: '销售金额', temperature: 924.67 },
        { month: '2019-05-04', city: '毛利润金额', temperature: 2400 },
        { month: '2019-05-05', city: '销售金额', temperature: 22904.56 },
        { month: '2019-05-05', city: '毛利润金额', temperature: 60000 },
        { month: '2019-05-06', city: '销售金额', temperature: 34059.9 },
        { month: '2019-05-06', city: '毛利润金额', temperature: 144000 },
        { month: '2019-05-07', city: '销售金额', temperature: 2410.87 },
        { month: '2019-05-07', city: '毛利润金额', temperature: 2100 },
        { month: '2019-05-08', city: '销售金额', temperature: 10013.39 },
        { month: '2019-05-08', city: '毛利润金额', temperature: 4200 },
        { month: '2019-05-09', city: '销售金额', temperature: 11147.98 },
        { month: '2019-05-09', city: '毛利润金额', temperature: 10300 },
        { month: '2019-05-10', city: '销售金额', temperature: 3556.25 },
        { month: '2019-05-10', city: '毛利润金额', temperature: 30000 },
        { month: '2019-05-11', city: '销售金额', temperature: 5533.76 },
        { month: '2019-05-11', city: '毛利润金额', temperature: 30000 },
        { month: '2019-05-12', city: '销售金额', temperature: 3877.76 },
        { month: '2019-05-12', city: '毛利润金额', temperature: 15000 },
        { month: '2019-05-13', city: '销售金额', temperature: 45.73 },
        { month: '2019-05-13', city: '毛利润金额', temperature: 76556.37 },
        { month: '2019-05-14', city: '销售金额', temperature: 429.49 },
        { month: '2019-05-14', city: '毛利润金额', temperature: 45665.45 },
        { month: '2019-05-15', city: '销售金额', temperature: 1594.82 },
        { month: '2019-05-15', city: '毛利润金额', temperature: 64000 },
        { month: '2019-05-16', city: '销售金额', temperature: 664.23 },
        { month: '2019-05-16', city: '毛利润金额', temperature: 5000 },
        { month: '2019-05-17', city: '销售金额', temperature: 5615.85 },
        { month: '2019-05-17', city: '毛利润金额', temperature: 6250 },
        { month: '2019-05-18', city: '销售金额', temperature: 4863.93 },
        { month: '2019-05-18', city: '毛利润金额', temperature: 2400 },
        { month: '2019-05-19', city: '销售金额', temperature: 23438.06 },
        { month: '2019-05-19', city: '毛利润金额', temperature: 2400 },
        { month: '2019-05-20', city: '销售金额', temperature: 49214.03 },
        { month: '2019-05-20', city: '毛利润金额', temperature: 20000 },
        { month: '2019-05-21', city: '销售金额', temperature: 52400.32 },
        { month: '2019-05-21', city: '毛利润金额', temperature: 18080 },
        { month: '2019-05-22', city: '销售金额', temperature: 6315.34 },
        { month: '2019-05-22', city: '毛利润金额', temperature: 5775 },
        { month: '2019-05-23', city: '销售金额', temperature: 60244.29 },
        { month: '2019-05-23', city: '毛利润金额', temperature: 3300 },
        { month: '2019-05-24', city: '销售金额', temperature: 2011.01 },
        { month: '2019-05-24', city: '毛利润金额', temperature: 19800 },
        { month: '2019-05-25', city: '销售金额', temperature: 22400.85 },
        { month: '2019-05-25', city: '毛利润金额', temperature: 16500 },
        { month: '2019-05-26', city: '销售金额', temperature: 5629.9 },
        { month: '2019-05-26', city: '毛利润金额', temperature: 5600 },
        { month: '2019-05-27', city: '销售金额', temperature: 24807.6 },
        { month: '2019-05-27', city: '毛利润金额', temperature: 36160 },
        { month: '2019-05-28', city: '销售金额', temperature: 1620.07 },
        { month: '2019-05-28', city: '毛利润金额', temperature: 26555 },
        { month: '2019-05-29', city: '销售金额', temperature: 4833.46 },
        { month: '2019-05-29', city: '毛利润金额', temperature: 59000 },
        { month: '2019-05-30', city: '销售金额', temperature: 26354.97 },
        { month: '2019-05-30', city: '毛利润金额', temperature: 48800 },
        { month: '2019-05-31', city: '销售金额', temperature: 18783.58 },
        { month: '2019-05-31', city: '毛利润金额', temperature: 637.7 },
    ];

    const chart4 = new G2.Chart({
        container: 'c5',
        autoFit: true,
        height: 450,
    });

    chart4.data(data4);
    chart4.scale({
        month: {
            range: [0, 1],
        },
        temperature: {
            nice: true,
        },
    });

    chart4.tooltip({
        showCrosshairs: true,
        shared: true,
    });

    chart4
        .line()
        .position('month*temperature')
        .color('city')

    chart4
        .point()
        .position('month*temperature')
        .color('city')

    chart4.render();
</script>

@*显示库存总量*@
<script>
    var vue = new Vue({
        el: '#KuCunTotal',
        data() {
            return {
                info: null
            }
        },
        mounted() {
            this.Show();
        },
        methods: {
            Show: function () {
                axios
                    .get('http://localhost:57059/api/ryan/kucuntotal')
                    .then(response => (this.info = response.data));
            }
        }
    })
</script>
@*显示本年销售总额*@
<script>
    var vue = new Vue({
        el: '#YearTotal',
        data() {
            return {
                info: null
            }
        },
        mounted() {
            this.Show();
        },
        methods: {
            Show: function () {
                axios
                    .get('http://localhost:57059/api/ryan/YearTotal')
                    .then(response => (this.info = response.data));
            }
        }
    })
</script>
@*显示本周销售总额*@
<script>
    var vue = new Vue({
        el: '#ZhouTotal',
        data() {
            return {
                info: null
            }
        },
        mounted() {
            this.Show();
        },
        methods: {
            Show: function () {
                axios
                    .get('http://localhost:57059/api/ryan/ZhouTotal')
                    .then(response => (this.info = response.data));
            }
        }
    })
</script>
@*显示本年采购额*@
<script>
    var vue = new Vue({
        el: '#CaiGouTotal',
        data() {
            return {
                info: null
            }
        },
        mounted() {
            this.Show();
        },
        methods: {
            Show: function () {
                axios
                    .get('http://localhost:57059/api/ryan/CaiGouTotal')
                    .then(response => (this.info = response.data));
            }
        }
    })
</script>
@*显示库存成本*@
<script>
    var vue = new Vue({
        el: '#ChengBenTotal',
        data() {
            return {
                info: null
            }
        },
        mounted() {
            this.Show();
        },
        methods: {
            Show: function () {
                axios
                    .get('http://localhost:57059/api/ryan/ChengBenTotal')
                    .then(response => (this.info = response.data));
            }
        }
    })
</script>

